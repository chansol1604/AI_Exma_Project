# -*- coding: utf-8 -*-
"""pandas03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xm5PSwEnBa40825JFESjcwJMyNQKtZiU
"""

import pandas as pd

df1 = pd.DataFrame({'a' : ['a0', 'a1', 'a2', 'a3'],
                    'b' : ['b0', 'b1', 'b2', 'b3'],
                    'c' : ['c0', 'c1', 'c2', 'c3']})
df1

df2 = pd.DataFrame({'a' : ['a2', 'a3', 'a4', 'a5'],
                    'b' : ['b2', 'b3', 'b4', 'b5'],
                    'c' : ['c2', 'c3', 'c4', 'c5'],
                    'd' : ['d2', 'd3', 'd4', 'd5']},
                   index = [2, 3, 4, 5])
df2

result1 = pd.concat([df1, df2])
result1.reset_index(drop = True, inplace = True)
result1

result1 = pd.concat([df1, df2], ignore_index = True)      # ignore_index = True -> 원래 있던 index 무시, 새로 붙여줌
result1

result2 = pd.concat([df1, df2], axis = 'columns')     # columns 으로 이어붙일 때는 같은 index를 찾아서 붙여줌.
result2                                               # 같은 index 없을 시 , NaN으로 채워줌

result3 = pd.concat([df1, df2], axis = 'columns', join = 'inner')     # index의 교집합만 뽑아서 join
print(result3)

result3 = pd.concat([df1, df2], axis = 1, join = 'outer')     # join -> 기본값이 outer, 원래의 값이 나옴
print(result3)

import seaborn as sns
titanic = sns.load_dataset('titanic')
df = titanic.loc[:, ['age', 'fare', 'sex', 'class', 'survived']]
#df['ten'] = 10
print(df.head())

grouped = df.groupby(['class'])
print(grouped)

grouped_df = {}
for key, group in grouped:
  print('key :', key)
  print('length :', len(group))
  grouped_df[key] = group
  print(group.head())

print(grouped_df.keys())

grouped_df['First']

average = grouped.mean()
average

grouped.min()

grouped.max()

grouped_two = df.groupby(['class', 'sex'])
for key, group in grouped_two:
  print('key :', key)
  print('length :', len(group))
  print(group.head())

grouped_two.mean()

group3f = grouped_two.get_group(('Third', 'female'))    # 그룹 하나만 뽑아서 출력, 튜플 사용
group3f

dfg = grouped_two.mean()
dfg

dfg.loc[('First', 'male')]

dfg.loc['First']

dfg.xs('female', level = 'sex')           # female 만 뽑아내고 싶을 때 사용, .loc는 에러 발생

titanic

df_teenage = titanic.loc[(titanic.age>= 10) & (titanic.age <20), :]     # 필터링, 비트 연산 사용
df_teenage

df_teenage.info()
print(df_teenage.survived.sum())

df_female_under10 = titanic.loc[(titanic.age<10) & (titanic.sex == 'female'), :]
df_female_under10.head()

df_female_under10.info()
print(df_female_under10.survived.sum())

df_under10_upper60 = titanic.loc[(titanic.age <10) | (titanic.age>=60), :]
df_under10_upper60

df_under10_upper60.info()
print(df_under10_upper60.survived.sum())
print(df_under10_upper60.survived.mean())

isin_filter = titanic['sibsp'].isin([2, 4, 5])      # false, true 로 이루어진 이진 칼럼
df_isin = titanic[isin_filter]
print(df_isin.head())

df_sibsp245 = titanic[(titanic.sibsp == 2) | (titanic.sibsp == 4) | (titanic.sibsp == 5)]
df_sibsp245

